<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Temporary Weather Station</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css" integrity="sha256-2pUeJf+y0ltRPSbKOeJh09ipQFYxUdct5nTY6GAXswA=" crossorigin="anonymous" />
    <style>
      .cardWrapper {
        display: flex;
        flex-wrap: wrap;
      }
      .card {
        flex: 1 0 41%;
        margin: 5px;
      }
      .first {
        flex: none;
        display: block;
        width: 100%;
      }
    </style>
    <meta name="viewport" content="width=device-width, initial-scale=1">
  </head>
  <body>
    <div class="container">
      <div id="app"></div>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.7.8/dayjs.min.js" integrity="sha256-uQ0sKs4tHW8ny6pRy18Q3fb3CNgxIv6CPB2cw1Lxj8w=" crossorigin="anonymous"></script>
      <script type="module">
       import { html, Component, render } from 'https://unpkg.com/htm/preact/standalone.mjs';

       class WeatherModel {
         constructor(data) {
           this.data = data;
         }

         get raw() {
           return this.data;
         }

         get temp() {
           return parseInt(this.data.temp, 10);
         }

         get barometerTemp() {
           return parseInt(this.data.barometerTemp, 10);
         }

         get pressure() {
           return parseFloat(this.data.pressure).toFixed(2);
         }

         get humidity() {
           return parseFloat(this.data.humidity).toFixed(2);
         }

         get altitude() {
           return parseInt(this.data.altitude, 10);
         }

         get hourlyRain() {
           return parseFloat(this.data.hourlyRain).toFixed(2);
         }

         get dailyRain() {
           return parseFloat(this.data.hourlyRain).toFixed(2);
         }

         get currentWindSpeed() {
           return parseFloat(this.data.currentWindSpeed).toFixed(2);
         }

         get currentWindDirection() {
           return this.data.currentWindDirection;
         }

         get displayTime() {
           return dayjs(this.data.createdAt).format('h:mm:ss a (MM/DD)');
         }
       }

       class App extends Component {
         componentDidMount() {
           fetch('/v1/weather')
             .then(resp => resp.json())
             .then(weather => {
               let data = weather.map(point => new WeatherModel(point));

               this.setState({ data });
               this.pollForData();
             });
         }

         pollForData() {
           window.setInterval(() => {
             if(!document.hidden) {
               fetch('/v1/weather')
                 .then(resp => resp.json())
                 .then(weather => {
                   let data = weather.map(point => new WeatherModel(point));

                   this.setState({ data });
                 });
             }
           }, 3500);
         }

         render(props, { data = [] }) {
           return html`
             <h1>Weather</h1>
             <div class="cardWrapper">
               ${data.map((dataPoint, index) => html`
                 <div class="${index === 0 ? 'first card' : 'card'}">
                   <div class="card-content">
                     <p class="title">
                       ${dataPoint.displayTime}
                     </p>
                     <div class="content">
                       <p>${dataPoint.temp} F</p>
                       <p>${dataPoint.humidity}%</p>
                       <p>${dataPoint.altitude} ft</p>
                       <p>${dataPoint.pressure} hPa</p>
                       <p>${dataPoint.currentWindSpeed} mph (${dataPoint.currentWindDirection})</p>
                       <p>${dataPoint.hourlyRain} in/hr</p>
                       <p>${dataPoint.dailyRain} in/day</p>
                       <p>Barometer temp ${dataPoint.barometerTemp} F</p>
                     </div>
                   </div>
                 </div>
               `)}
             </div>
           `;
         }
       }

       render(html`<${App}/>`, document.getElementById('app'));
      </script>
      <!-- <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script> -->
    </div>
  </body>
</html>
